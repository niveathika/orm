
import ballerina/jballerina.java;

# Represents a database client connection.
public client class Client {

    # Initializes the DB Client. DB connection configs are fetched from the `Config.toml`
    # + return - An `Error` if the client creation fails
    public isolated function init() returns Error? {
    }

    # Insert the record entity value into the DB table. Table details are fetched from the annotations
    #
    # + value - Entity value need to add to the DB
    # + return - Metadata of the execution as an `ExecutionResult` or an `Error`
    remote isolated function insert(record {} value) returns ExecutionResult|Error {
        return error Error("");
    }

    # Delete the record from the DB table, for the given condition. If the condition is not provided, all the records in the table will be deleted.
    #
    # + 'table - Ballerina record descriptor which mapped to the table.
    # + condition - Condition for the query
    # + return - Metadata of the execution as an `ExecutionResult` or an `Error`
    remote isolated function delete(typedesc<record {}> 'table, *Condition condition) returns ExecutionResult|Error {
        return error Error("");
    }

    # Update the record entity value to the DB table. Table details are fetched from the annotations
    #
    # + updateValues - Entity value need to update the DB
    # + condition - Condition for the query
    # + return - Metadata of the execution as an `ExecutionResult` or an `Error`
    remote isolated function update(record {} updateValues, *Condition condition) returns ExecutionResult|Error {
        return error Error("");
    }

    # query the table mapped to the Ballerina record and return. If no condition is provided, all rows are fetched.
    #
    # + rowType - The `typedesc` of the record to which the result needs to be returned.
    # + condition - Condition for the query
    # + return - Stream of records in the `rowType` type
    remote isolated function get(typedesc<record {}> rowType = <>, *Condition condition) returns stream<rowType, Error?> = @java:Method {
        'class: "",
        name: ""
    } external;

    # query the table mapped to the Ballerina record and return with associations. If no condition is provided, all rows are fetched.
    #
    # + rowType - The `typedesc` of the record to which the result needs to be returned.
    # + condition - Condition for the query
    # + return - Stream of records in the `rowType` type
    remote isolated function getWithAssociations(typedesc<record {}> rowType = <>, *Condition condition) returns stream<rowType, Error?> = @java:Method {
        'class: "",
        name: ""
    } external;

    # query the table mapped to the Ballerina record and return one record.
    #
    # + rowType - The `typedesc` of the record to which the result needs to be returned.
    # + condition - Condition for the query
    # + return - Result in the `returnType` type or an `sql:Error`
    remote isolated function getRecord(typedesc<record {}> rowType = <>, *Condition condition) returns rowType|Error = @java:Method {
        'class: "",
        name: ""
    } external;

    // Closes the connection and shuts down the connection pool.
    public isolated function close() returns Error? {
    }
}

# Condition that needs to be applied for the operation.
#
# + 'table - table which cannot be a key
# + 'rowType - rowType which cannot be a key
public type Condition record {|
    never 'table?;
    never rowType?;
    anydata...;
|};

# Metadata of the query execution.
#
# + affectedRowCount - Number of rows affected by the execution of the query. It may be one of the following, 
# + lastInsertId - The ID generated by the database in response to query execution. This can be `()` in case the database does not support this feature
public type ExecutionResult record {
    int? affectedRowCount;
    string|int? lastInsertId;
};

# Defines the generic error type for the `sql` module.
public type Error distinct error;
